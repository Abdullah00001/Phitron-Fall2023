https://www.geeksforgeeks.org/problems/detect-cycle-in-an-undirected-graph/1?itm_source=geeksforgeeks&itm_medium=article&itm_campaign=bottom_sticky_on_article
solution


//{ Driver Code Starts
#include <bits/stdc++.h>
using namespace std;

// } Driver Code Ends
class Solution {
  public:
    // Function to detect cycle in an undirected graph.
    static const int N=1e5+5;
    bool isvis[N];
    bool ans;
    int prntarray[N];
    void bfs(int src,vector<int>mat[])
    {
        queue<int>p;
        p.push(src);
        isvis[src]=true;
        while(!p.empty())
        {
            int prntNode=p.front();
            p.pop();
            for(int &childNode:mat[prntNode])
            {
                if(isvis[childNode]&& prntarray[prntNode]!=childNode)
                {
                    ans=true;
                }
                if(!isvis[childNode])
                {
                    isvis[childNode]=true;
                    p.push(childNode);
                    prntarray[childNode]=prntNode;
                }
            }
        }
    }
    bool isCycle(int V, vector<int> adj[]) {
        // Code here
        memset(isvis,false,sizeof(isvis));
        memset(prntarray,-1,sizeof(prntarray));
        ans=false;
        for(int i=0;i<V;i++)
        {
            if(!isvis[i])
            {
            
                //ans=false;
                bfs(i,adj);
                //if(ans) return true;
            }
        }
        return ans;
    }
};

//{ Driver Code Starts.
int main() {
    int tc;
    cin >> tc;
    while (tc--) {
        int V, E;
        cin >> V >> E;
        vector<int> adj[V];
        for (int i = 0; i < E; i++) {
            int u, v;
            cin >> u >> v;
            adj[u].push_back(v);
            adj[v].push_back(u);
        }
        Solution obj;
        bool ans = obj.isCycle(V, adj);
        if (ans)
            cout << "1\n";
        else
            cout << "0\n";
    }
    return 0;
}
// } Driver Code Ends